package main

import (
	"log"
	"net/http"
	"newsfeeder/httpd/handler"
	"newsfeeder/middleware"
	"newsfeeder/platform/newsfeed"
	swaggerFiles "github.com/swaggo/files"  // swagger embed files
	"github.com/swaggo/gin-swagger" // gin-swagger middleware

	jwt "github.com/appleboy/gin-jwt/v2"
	"github.com/gin-gonic/gin"
	_ "newsfeeder/docs" // docs is generated by Swag CLI, you have to import it.
)
// @title Blueprint Swagger API
// @version 1.0
// @description Swagger API for Golang Project Blueprint.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.email martin7.heinz@gmail.com

// @license.name MIT
// @license.url https://github.com/MartinHeinz/go-project-blueprint/blob/master/LICENSE

// @BasePath /api/v1
func main() {
	port := "8080"
	r := gin.New()
	r.Use(gin.Logger())
	r.Use(gin.Recovery())

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	// the jwt middleware
	authMiddleware, err := middleware.SetUpAuth()
	if err != nil {
		log.Fatal("JWT Error:" + err.Error())
	}
	r.NoRoute(authMiddleware.MiddlewareFunc(), func(c *gin.Context) {
		claims := jwt.ExtractClaims(c)
		log.Printf("NoRoute claims: %#v\n", claims)
		c.JSON(404, gin.H{"code": "PAGE_NOT_FOUND", "message": "Page not found"})
	})

	auth := r.Group("/api/v1")

	auth.POST("/login", authMiddleware.LoginHandler)
	// Refresh time can be longer than token timeout
	auth.GET("/refresh_token", authMiddleware.RefreshHandler)
	auth.Use(authMiddleware.MiddlewareFunc())
	{
		feed := newsfeed.New()
		auth.GET("/newsfeed", handler.NewsfeedGet(feed))
		auth.GET("/bitcoinnews", handler.GetBitcoinAndSportsNews())
		auth.GET("/sportsnews", handler.GetSportsNews())
		auth.POST("/newsfeed", handler.NewsfeedPost(feed))
	}

	if err := http.ListenAndServe(":"+port, r); err != nil {
		log.Fatal(err)
	}

}
